{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStorageSlotNumForLongString = exports.soliditySha3Raw = exports.soliditySha3 = exports.encodePacked = exports.processSolidityEncodePackedArgs = exports.keccak256 = exports.keccak256Wrapper = exports.sha3Raw = exports.sha3 = void 0;\n/**\n * @module Utils\n */\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst utils_js_1 = require(\"ethereum-cryptography/utils.js\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst converters_js_1 = require(\"./converters.js\");\nconst string_manipulation_js_1 = require(\"./string_manipulation.js\");\nconst SHA3_EMPTY_BYTES = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * computes the Keccak-256 hash of the input and returns a hexstring\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * console.log(web3.utils.sha3('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.sha3(''));\n * > undefined\n * ```\n */\nconst sha3 = data => {\n  let updatedData;\n  if (typeof data === 'string') {\n    if (data.startsWith('0x') && (0, web3_validator_1.isHexStrict)(data)) {\n      updatedData = (0, converters_js_1.hexToBytes)(data);\n    } else {\n      updatedData = (0, utils_js_1.utf8ToBytes)(data);\n    }\n  } else {\n    updatedData = data;\n  }\n  const hash = (0, converters_js_1.bytesToHex)((0, keccak_js_1.keccak256)(updatedData));\n  // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n  return hash === SHA3_EMPTY_BYTES ? undefined : hash;\n};\nexports.sha3 = sha3;\n/**\n * Will calculate the sha3 of the input but does return the hash value instead of null if for example a empty string is passed.\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * conosle.log(web3.utils.sha3Raw('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.sha3Raw(''));\n * > 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n * ```\n */\nconst sha3Raw = data => {\n  const hash = (0, exports.sha3)(data);\n  if ((0, web3_validator_1.isNullish)(hash)) {\n    return SHA3_EMPTY_BYTES;\n  }\n  return hash;\n};\nexports.sha3Raw = sha3Raw;\n/**\n * A wrapper for ethereum-cryptography/keccak256 to allow hashing a `string` and a `bigint` in addition to `UInt8Array`\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * console.log(web3.utils.keccak256Wrapper('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.keccak256Wrapper(1));\n * > 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6\n *\n * console.log(web3.utils.keccak256Wrapper(0xaf12fd));\n * > 0x358640fd4719fa923525d74ab5ae80a594301aba5543e3492b052bf4598b794c\n * ```\n */\nconst keccak256Wrapper = data => {\n  let processedData;\n  if (typeof data === 'bigint' || typeof data === 'number') {\n    processedData = (0, utils_js_1.utf8ToBytes)(data.toString());\n  } else if (Array.isArray(data)) {\n    processedData = new Uint8Array(data);\n  } else if (typeof data === 'string' && !(0, web3_validator_1.isHexStrict)(data)) {\n    processedData = (0, utils_js_1.utf8ToBytes)(data);\n  } else {\n    processedData = (0, converters_js_1.bytesToUint8Array)(data);\n  }\n  return (0, converters_js_1.bytesToHex)((0, keccak_js_1.keccak256)(processedData));\n};\nexports.keccak256Wrapper = keccak256Wrapper;\nexports.keccak256 = exports.keccak256Wrapper;\n/**\n * returns type and value\n * @param arg - the input to return the type and value\n * @returns - the type and value of the input\n */\nconst getType = arg => {\n  if (Array.isArray(arg)) {\n    throw new Error('Autodetection of array types is not supported.');\n  }\n  let type;\n  let value;\n  // if type is given\n  if (typeof arg === 'object' && ('t' in arg || 'type' in arg) && ('v' in arg || 'value' in arg)) {\n    type = 't' in arg ? arg.t : arg.type;\n    value = 'v' in arg ? arg.v : arg.value;\n    type = type.toLowerCase() === 'bigint' ? 'int' : type;\n  } else if (typeof arg === 'bigint') {\n    return ['int', arg];\n  }\n  // otherwise try to guess the type\n  else {\n    type = (0, converters_js_1.toHex)(arg, true);\n    value = (0, converters_js_1.toHex)(arg);\n    if (!type.startsWith('int') && !type.startsWith('uint')) {\n      type = 'bytes';\n    }\n  }\n  if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n    value = (0, converters_js_1.toBigInt)(value);\n  }\n  return [type, value];\n};\n/**\n * returns the type with size if uint or int\n * @param name - the input to return the type with size\n * @returns - the type with size of the input\n */\nconst elementaryName = name => {\n  if (name.startsWith('int[')) {\n    return `int256${name.slice(3)}`;\n  }\n  if (name === 'int') {\n    return 'int256';\n  }\n  if (name.startsWith('uint[')) {\n    return `uint256'${name.slice(4)}`;\n  }\n  if (name === 'uint') {\n    return 'uint256';\n  }\n  return name;\n};\n/**\n * returns the size of the value of type 'byte'\n */\nconst parseTypeN = (value, typeLength) => {\n  const typesize = /^(\\d+).*$/.exec(value.slice(typeLength));\n  return typesize ? parseInt(typesize[1], 10) : 0;\n};\n/**\n * returns the bit length of the value\n * @param value - the input to return the bit length\n * @returns - the bit length of the input\n */\nconst bitLength = value => {\n  const updatedVal = value.toString(2);\n  return updatedVal.length;\n};\n/**\n * Pads the value based on size and type\n * returns a string of the padded value\n * @param type - the input to pad\n * @returns = the padded value\n */\nconst solidityPack = (type, val) => {\n  const value = val.toString();\n  if (type === 'string') {\n    if (typeof val === 'string') return (0, converters_js_1.utf8ToHex)(val);\n    throw new web3_errors_1.InvalidStringError(val);\n  }\n  if (type === 'bool' || type === 'boolean') {\n    if (typeof val === 'boolean') return val ? '01' : '00';\n    throw new web3_errors_1.InvalidBooleanError(val);\n  }\n  if (type === 'address') {\n    if (!(0, web3_validator_1.isAddress)(value)) {\n      throw new web3_errors_1.InvalidAddressError(value);\n    }\n    return value;\n  }\n  const name = elementaryName(type);\n  if (type.startsWith('uint')) {\n    const size = parseTypeN(name, 'uint'.length);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new web3_errors_1.InvalidSizeError(value);\n    }\n    const num = (0, converters_js_1.toNumber)(value);\n    if (bitLength(num) > size) {\n      throw new web3_errors_1.InvalidLargeValueError(value);\n    }\n    if (num < BigInt(0)) {\n      throw new web3_errors_1.InvalidUnsignedIntegerError(value);\n    }\n    return size ? (0, string_manipulation_js_1.leftPad)(num.toString(16), size / 8 * 2) : num.toString(16);\n  }\n  if (type.startsWith('int')) {\n    const size = parseTypeN(name, 'int'.length);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new web3_errors_1.InvalidSizeError(type);\n    }\n    const num = (0, converters_js_1.toNumber)(value);\n    if (bitLength(num) > size) {\n      throw new web3_errors_1.InvalidLargeValueError(value);\n    }\n    if (num < BigInt(0)) {\n      return (0, string_manipulation_js_1.toTwosComplement)(num.toString(), size / 8 * 2);\n    }\n    return size ? (0, string_manipulation_js_1.leftPad)(num.toString(16), size / 4) : num.toString(16);\n  }\n  if (name === 'bytes') {\n    if (value.replace(/^0x/i, '').length % 2 !== 0) {\n      throw new web3_errors_1.InvalidBytesError(value);\n    }\n    return value;\n  }\n  if (type.startsWith('bytes')) {\n    if (value.replace(/^0x/i, '').length % 2 !== 0) {\n      throw new web3_errors_1.InvalidBytesError(value);\n    }\n    const size = parseTypeN(type, 'bytes'.length);\n    if (!size || size < 1 || size > 64 || size < value.replace(/^0x/i, '').length / 2) {\n      throw new web3_errors_1.InvalidBytesError(value);\n    }\n    return (0, string_manipulation_js_1.rightPad)(value, size * 2);\n  }\n  return '';\n};\n/**\n * returns a string of the tightly packed value given based on the type\n * @param arg - the input to return the tightly packed value\n * @returns - the tightly packed value\n */\nconst processSolidityEncodePackedArgs = arg => {\n  const [type, val] = getType(arg);\n  // array case\n  if (Array.isArray(val)) {\n    // go through each element of the array and use map function to create new hexarg list\n    const hexArg = val.map(v => solidityPack(type, v).replace('0x', ''));\n    return hexArg.join('');\n  }\n  const hexArg = solidityPack(type, val);\n  return hexArg.replace('0x', '');\n};\nexports.processSolidityEncodePackedArgs = processSolidityEncodePackedArgs;\n/**\n * Encode packed arguments to a hexstring\n */\nconst encodePacked = (...values) => {\n  const hexArgs = values.map(exports.processSolidityEncodePackedArgs);\n  return `0x${hexArgs.join('').toLowerCase()}`;\n};\nexports.encodePacked = encodePacked;\n/**\n * Will tightly pack values given in the same way solidity would then hash.\n * returns a hash string, or null if input is empty\n * @param values - the input to return the tightly packed values\n * @returns - the keccack246 of the tightly packed values\n *\n * @example\n * ```ts\n *  console.log([{ type: 'string', value: '31323334' }]);\n * console.log(web3.utils.soliditySha3({ type: \"string\", value: \"31323334\" }));\n * > 0xf15f8da2ad27e486d632dc37d24912f634398918d6f9913a0a0ff84e388be62b\n * ```\n */\nconst soliditySha3 = (...values) => (0, exports.sha3)((0, exports.encodePacked)(...values));\nexports.soliditySha3 = soliditySha3;\n/**\n * Will tightly pack values given in the same way solidity would then hash.\n * returns a hash string, if input is empty will return `0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470`\n * @param values - the input to return the tightly packed values\n * @returns - the keccack246 of the tightly packed values\n *\n * @example\n * ```ts\n * console.log(web3.utils.soliditySha3Raw({ type: \"string\", value: \"helloworld\" }))\n * > 0xfa26db7ca85ead399216e7c6316bc50ed24393c3122b582735e7f3b0f91b93f0\n * ```\n */\nconst soliditySha3Raw = (...values) => (0, exports.sha3Raw)((0, exports.encodePacked)(...values));\nexports.soliditySha3Raw = soliditySha3Raw;\n/**\n * Get slot number for storage long string in contract. Basically for getStorage method\n * returns slotNumber where will data placed\n * @param mainSlotNumber - the slot number where will be stored hash of long string\n * @returns - the slot number where will be stored long string\n */\nconst getStorageSlotNumForLongString = mainSlotNumber => (0, exports.sha3)(`0x${(typeof mainSlotNumber === 'number' ? mainSlotNumber.toString() : mainSlotNumber).padStart(64, '0')}`);\nexports.getStorageSlotNumForLongString = getStorageSlotNumForLongString;","map":{"version":3,"names":["require","keccak_js_1","utils_js_1","web3_errors_1","web3_validator_1","converters_js_1","string_manipulation_js_1","SHA3_EMPTY_BYTES","sha3","data","updatedData","startsWith","isHexStrict","hexToBytes","utf8ToBytes","hash","bytesToHex","keccak256","undefined","exports","sha3Raw","isNullish","keccak256Wrapper","processedData","toString","Array","isArray","Uint8Array","bytesToUint8Array","getType","arg","Error","type","value","t","v","toLowerCase","toHex","test","toBigInt","elementaryName","name","slice","parseTypeN","typeLength","typesize","exec","parseInt","bitLength","updatedVal","length","solidityPack","val","utf8ToHex","InvalidStringError","InvalidBooleanError","isAddress","InvalidAddressError","size","InvalidSizeError","num","toNumber","InvalidLargeValueError","BigInt","InvalidUnsignedIntegerError","leftPad","toTwosComplement","replace","InvalidBytesError","rightPad","processSolidityEncodePackedArgs","hexArg","map","join","encodePacked","values","hexArgs","soliditySha3","soliditySha3Raw","getStorageSlotNumForLongString","mainSlotNumber","padStart"],"sources":["../../src/hash.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}