{"ast":null,"code":"import { ref } from \"vue\";\nimport Web3 from \"web3\";\nimport Tx from 'ethereumjs-tx';\nexport default {\n  __name: 'web3Api',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    var web3 = new Web3(Web3.givenProvider || 'wss://goerli.infura.io/ws/v3/dc92288a859d445890ede39d9dba5861');\n    //var web311 = new web3(web3.givenProvider || \"ws://localhost:8545\");\n    //console.log(\"Web3:\", web3) \n\n    //创建账号\n    // const account = web3.eth.accounts.create(\"123\");\n    // console.log(\"account-->\",account)\n\n    const address = ref(\"0xB36abFFDb423bD33d4C110DCe7414422df06FCe4\");\n    const privateKey = ref(\"0x60e5fac5413a63ded9b739401df6b7c51a43b8b34392dff7e54a8e0e271d4430\");\n    const balance = ref(0);\n\n    //balance.value = \n    web3.eth.getBalance(address.value).then(res => {\n      balance.value = res;\n    });\n    //console.log(\"balance----->\",balance)\n\n    //单位转换\n    let num1 = web3.utils.toWei('0.30', 'ether');\n    let num2 = web3.utils.fromWei(\"300000000000\", 'ether');\n    console.log(\"num2---->\", num2);\n\n    //转账\n    const send = async () => {\n      //1.构建转账参数\n      //获取账户交易次数\n      const nonce = await web3.eth.getTransactionCount(address.value);\n      console.log(\"nonce--->\", nonce);\n      //获取预计转账gas\n      const gasPrice = await web3.eth.getGasPrice();\n      console.log(\"gasPrice--->\", gasPrice);\n      //转账金额 以wei 作为单位\n      const value = web3.utils.toWei('0.001', 'ether');\n      const rawTx = {\n        from: address.value,\n        to: '0x75844F334e4fDa3FD590fd5A28C939c8E17c2D4E',\n        nonce,\n        gasPrice,\n        value,\n        data: '0x0000'\n      };\n\n      //2. 生成 serializedTx\n\n      //转换成私钥\n      const pKys = Buffer(privateKey.value.slice(2), 'hex');\n      console.log('pKys--->', pKys);\n      //gas 估算\n      const gas = await web3.eth.estimateGas(rawTx);\n      console.log(\"gas---->\", gas);\n      rawTx.gas = gas;\n\n      //\n    };\n    const __returned__ = {\n      get web3() {\n        return web3;\n      },\n      set web3(v) {\n        web3 = v;\n      },\n      address,\n      privateKey,\n      balance,\n      get num1() {\n        return num1;\n      },\n      set num1(v) {\n        num1 = v;\n      },\n      get num2() {\n        return num2;\n      },\n      set num2(v) {\n        num2 = v;\n      },\n      send,\n      ref,\n      get Web3() {\n        return Web3;\n      },\n      get Tx() {\n        return Tx;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","Web3","Tx","web3","givenProvider","address","privateKey","balance","eth","getBalance","value","then","res","num1","utils","toWei","num2","fromWei","console","log","send","nonce","getTransactionCount","gasPrice","getGasPrice","rawTx","from","to","data","pKys","Buffer","slice","gas","estimateGas"],"sources":["D:/a/wallet-demo/web3-wallet/src/components/web3Api.vue"],"sourcesContent":["<template>\r\n   <h1>账户信息:</h1>\r\n   <van-divider :margin=\"12\" />\r\n   <p>地址:{{address}}</p>\r\n   <van-divider :margin=\"12\" />\r\n   <p>私钥:{{privateKey}}</p>\r\n   <van-divider :margin=\"12\" />\r\n   <p>余额:{{balance}}</p>\r\n   \r\n   <van-divider :margin=\"12\" />\r\n   <h1>转账操作</h1>\r\n   <van-button type=\"primary\" @click=\"send\">开始转账</van-button>\r\n</template>\r\n\r\n<script setup>\r\nimport {ref} from \"vue\";\r\nimport Web3 from \"web3\";\r\nimport Tx from 'ethereumjs-tx';\r\n \r\nvar web3 = new Web3(Web3.givenProvider || 'wss://goerli.infura.io/ws/v3/dc92288a859d445890ede39d9dba5861');\r\n//var web311 = new web3(web3.givenProvider || \"ws://localhost:8545\");\r\n//console.log(\"Web3:\", web3) \r\n\r\n//创建账号\r\n// const account = web3.eth.accounts.create(\"123\");\r\n// console.log(\"account-->\",account)\r\n\r\nconst address = ref(\"0xB36abFFDb423bD33d4C110DCe7414422df06FCe4\")\r\nconst privateKey= ref(\"0x60e5fac5413a63ded9b739401df6b7c51a43b8b34392dff7e54a8e0e271d4430\")\r\n\r\nconst balance = ref(0)\r\n\r\n//balance.value = \r\nweb3.eth.getBalance(address.value).then((res)=>{\r\n    balance.value = res\r\n})\r\n//console.log(\"balance----->\",balance)\r\n\r\n\r\n//单位转换\r\nlet num1 = web3.utils.toWei('0.30','ether');\r\nlet num2 = web3.utils.fromWei(\"300000000000\",'ether');\r\nconsole.log(\"num2---->\",num2);\r\n\r\n//转账\r\nconst send = async ()=>{\r\n    //1.构建转账参数\r\n    //获取账户交易次数\r\n    const nonce = await web3.eth.getTransactionCount(address.value);\r\n    console.log(\"nonce--->\",nonce)\r\n    //获取预计转账gas\r\n    const gasPrice = await web3.eth.getGasPrice();\r\n    console.log(\"gasPrice--->\",gasPrice);\r\n    //转账金额 以wei 作为单位\r\n    const value = web3.utils.toWei('0.001', 'ether');\r\n\r\n    const rawTx = {\r\n        from:address.value,\r\n        to:'0x75844F334e4fDa3FD590fd5A28C939c8E17c2D4E',\r\n        nonce,\r\n        gasPrice,\r\n        value,\r\n        data:'0x0000',\r\n    };\r\n\r\n    //2. 生成 serializedTx\r\n\r\n    //转换成私钥\r\n    const pKys = Buffer(privateKey.value.slice(2),'hex')\r\n    console.log('pKys--->',pKys);\r\n    //gas 估算\r\n    const gas = await web3.eth.estimateGas(rawTx);\r\n    console.log(\"gas---->\",gas)\r\n    rawTx.gas = gas;\r\n    \r\n    //\r\n\r\n}\r\n\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":"AAeA,SAAQA,GAAG,QAAO,KAAK;AACvB,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,EAAE,MAAM,eAAe;;;;;;;IAE9B,IAAIC,IAAI,GAAG,IAAIF,IAAI,CAACA,IAAI,CAACG,aAAa,IAAI,+DAA+D,CAAC;IAC1G;IACA;;IAEA;IACA;IACA;;IAEA,MAAMC,OAAO,GAAGL,GAAG,CAAC,4CAA4C,CAAC;IACjE,MAAMM,UAAU,GAAEN,GAAG,CAAC,oEAAoE,CAAC;IAE3F,MAAMO,OAAO,GAAGP,GAAG,CAAC,CAAC,CAAC;;IAEtB;IACAG,IAAI,CAACK,GAAG,CAACC,UAAU,CAACJ,OAAO,CAACK,KAAK,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAG;MAC3CL,OAAO,CAACG,KAAK,GAAGE,GAAG;IACvB,CAAC,CAAC;IACF;;IAGA;IACA,IAAIC,IAAI,GAAGV,IAAI,CAACW,KAAK,CAACC,KAAK,CAAC,MAAM,EAAC,OAAO,CAAC;IAC3C,IAAIC,IAAI,GAAGb,IAAI,CAACW,KAAK,CAACG,OAAO,CAAC,cAAc,EAAC,OAAO,CAAC;IACrDC,OAAO,CAACC,GAAG,CAAC,WAAW,EAACH,IAAI,CAAC;;IAE7B;IACA,MAAMI,IAAI,GAAG,MAAAA,CAAA,KAAU;MACnB;MACA;MACA,MAAMC,KAAK,GAAG,MAAMlB,IAAI,CAACK,GAAG,CAACc,mBAAmB,CAACjB,OAAO,CAACK,KAAK,CAAC;MAC/DQ,OAAO,CAACC,GAAG,CAAC,WAAW,EAACE,KAAK,CAAC;MAC9B;MACA,MAAME,QAAQ,GAAG,MAAMpB,IAAI,CAACK,GAAG,CAACgB,WAAW,CAAC,CAAC;MAC7CN,OAAO,CAACC,GAAG,CAAC,cAAc,EAACI,QAAQ,CAAC;MACpC;MACA,MAAMb,KAAK,GAAGP,IAAI,CAACW,KAAK,CAACC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC;MAEhD,MAAMU,KAAK,GAAG;QACVC,IAAI,EAACrB,OAAO,CAACK,KAAK;QAClBiB,EAAE,EAAC,4CAA4C;QAC/CN,KAAK;QACLE,QAAQ;QACRb,KAAK;QACLkB,IAAI,EAAC;MACT,CAAC;;MAED;;MAEA;MACA,MAAMC,IAAI,GAAGC,MAAM,CAACxB,UAAU,CAACI,KAAK,CAACqB,KAAK,CAAC,CAAC,CAAC,EAAC,KAAK,CAAC;MACpDb,OAAO,CAACC,GAAG,CAAC,UAAU,EAACU,IAAI,CAAC;MAC5B;MACA,MAAMG,GAAG,GAAG,MAAM7B,IAAI,CAACK,GAAG,CAACyB,WAAW,CAACR,KAAK,CAAC;MAC7CP,OAAO,CAACC,GAAG,CAAC,UAAU,EAACa,GAAG,CAAC;MAC3BP,KAAK,CAACO,GAAG,GAAGA,GAAG;;MAEf;IAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}