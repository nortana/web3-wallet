{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSignedTransaction = void 0;\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\nconst detect_transaction_type_js_1 = require(\"./detect_transaction_type.js\");\nconst format_transaction_js_1 = require(\"./format_transaction.js\");\n/**\n * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.\n *\n * @param encodedSignedTransaction The RLP encoded transaction.\n * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.\n * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n */\nfunction decodeSignedTransaction(encodedSignedTransaction, returnFormat, options = {\n  fillInputAndData: false\n}) {\n  return {\n    raw: (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, encodedSignedTransaction, returnFormat),\n    tx: (0, format_transaction_js_1.formatTransaction)(Object.assign(Object.assign({}, web3_eth_accounts_1.TransactionFactory.fromSerializedData((0, web3_utils_1.hexToBytes)(encodedSignedTransaction)).toJSON()), {\n      hash: (0, web3_utils_1.bytesToHex)((0, web3_utils_1.keccak256)((0, web3_utils_1.hexToBytes)(encodedSignedTransaction))),\n      type: (0, detect_transaction_type_js_1.detectRawTransactionType)((0, web3_utils_1.hexToBytes)(encodedSignedTransaction))\n    }), returnFormat, {\n      fillInputAndData: options.fillInputAndData\n    })\n  };\n}\nexports.decodeSignedTransaction = decodeSignedTransaction;","map":{"version":3,"names":["web3_utils_1","require","web3_eth_accounts_1","detect_transaction_type_js_1","format_transaction_js_1","decodeSignedTransaction","encodedSignedTransaction","returnFormat","options","fillInputAndData","raw","format","tx","formatTransaction","Object","assign","TransactionFactory","fromSerializedData","hexToBytes","toJSON","hash","bytesToHex","keccak256","type","detectRawTransactionType","exports"],"sources":["../../../src/utils/decode_signed_transaction.ts"],"sourcesContent":[null],"mappings":";;;;;;AAsBA,MAAAA,YAAA,GAAAC,OAAA;AACA,MAAAC,mBAAA,GAAAD,OAAA;AACA,MAAAE,4BAAA,GAAAF,OAAA;AACA,MAAAG,uBAAA,GAAAH,OAAA;AAEA;;;;;;;AAOA,SAAgBI,uBAAuBA,CACtCC,wBAAwC,EACxCC,YAA0B,EAC1BC,OAAA,GAA0C;EAAEC,gBAAgB,EAAE;AAAK,CAAE;EAErE,OAAO;IACNC,GAAG,EAAE,IAAAV,YAAA,CAAAW,MAAM,EAAC;MAAEA,MAAM,EAAE;IAAO,CAAE,EAAEL,wBAAwB,EAAEC,YAAY,CAAC;IACxEK,EAAE,EAAE,IAAAR,uBAAA,CAAAS,iBAAiB,EACpBC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACIb,mBAAA,CAAAc,kBAAkB,CAACC,kBAAkB,CACvC,IAAAjB,YAAA,CAAAkB,UAAU,EAACZ,wBAAwB,CAAC,CACpC,CAACa,MAAM,EAAE;MACVC,IAAI,EAAE,IAAApB,YAAA,CAAAqB,UAAU,EAAC,IAAArB,YAAA,CAAAsB,SAAS,EAAC,IAAAtB,YAAA,CAAAkB,UAAU,EAACZ,wBAAwB,CAAC,CAAC,CAAC;MACjEiB,IAAI,EAAE,IAAApB,4BAAA,CAAAqB,wBAAwB,EAAC,IAAAxB,YAAA,CAAAkB,UAAU,EAACZ,wBAAwB,CAAC;IAAC,EAC5C,EACzBC,YAAY,EACZ;MAAEE,gBAAgB,EAAED,OAAO,CAACC;IAAgB,CAAE;GAE/C;AACF;AAnBAgB,OAAA,CAAApB,uBAAA,GAAAA,uBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}