{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeDynamicParams = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst web3_utils_1 = require(\"web3-utils\");\nconst utils_js_1 = require(\"../utils.js\");\nconst number_js_1 = require(\"./number.js\");\nfunction encodeDynamicParams(encodedParams) {\n  let staticSize = 0;\n  let dynamicSize = 0;\n  const staticParams = [];\n  const dynamicParams = [];\n  // figure out static size\n  for (const encodedParam of encodedParams) {\n    if (encodedParam.dynamic) {\n      staticSize += utils_js_1.WORD_SIZE;\n    } else {\n      staticSize += encodedParam.encoded.length;\n    }\n  }\n  for (const encodedParam of encodedParams) {\n    if (encodedParam.dynamic) {\n      staticParams.push((0, number_js_1.encodeNumber)({\n        type: 'uint256',\n        name: ''\n      }, staticSize + dynamicSize));\n      dynamicParams.push(encodedParam);\n      dynamicSize += encodedParam.encoded.length;\n    } else {\n      staticParams.push(encodedParam);\n    }\n  }\n  return (0, web3_utils_1.uint8ArrayConcat)(...staticParams.map(p => p.encoded), ...dynamicParams.map(p => p.encoded));\n}\nexports.encodeDynamicParams = encodeDynamicParams;","map":{"version":3,"names":["web3_utils_1","require","utils_js_1","number_js_1","encodeDynamicParams","encodedParams","staticSize","dynamicSize","staticParams","dynamicParams","encodedParam","dynamic","WORD_SIZE","encoded","length","push","encodeNumber","type","name","uint8ArrayConcat","map","p","exports"],"sources":["../../../../src/coders/base/utils.ts"],"sourcesContent":[null],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA,MAAAA,YAAA,GAAAC,OAAA;AAEA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,WAAA,GAAAF,OAAA;AAEA,SAAgBG,mBAAmBA,CAACC,aAA2C;EAC9E,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,WAAW,GAAG,CAAC;EACnB,MAAMC,YAAY,GAAoB,EAAE;EACxC,MAAMC,aAAa,GAAoB,EAAE;EACzC;EACA,KAAK,MAAMC,YAAY,IAAIL,aAAa,EAAE;IACzC,IAAIK,YAAY,CAACC,OAAO,EAAE;MACzBL,UAAU,IAAIJ,UAAA,CAAAU,SAAS;KACvB,MAAM;MACNN,UAAU,IAAII,YAAY,CAACG,OAAO,CAACC,MAAM;;;EAI3C,KAAK,MAAMJ,YAAY,IAAIL,aAAa,EAAE;IACzC,IAAIK,YAAY,CAACC,OAAO,EAAE;MACzBH,YAAY,CAACO,IAAI,CAChB,IAAAZ,WAAA,CAAAa,YAAY,EAAC;QAAEC,IAAI,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAE,CAAE,EAAEZ,UAAU,GAAGC,WAAW,CAAC,CACrE;MACDE,aAAa,CAACM,IAAI,CAACL,YAAY,CAAC;MAChCH,WAAW,IAAIG,YAAY,CAACG,OAAO,CAACC,MAAM;KAC1C,MAAM;MACNN,YAAY,CAACO,IAAI,CAACL,YAAY,CAAC;;;EAGjC,OAAO,IAAAV,YAAA,CAAAmB,gBAAgB,EACtB,GAAGX,YAAY,CAACY,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACR,OAAO,CAAC,EACnC,GAAGJ,aAAa,CAACW,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACR,OAAO,CAAC,CACpC;AACF;AA7BAS,OAAA,CAAAlB,mBAAA,GAAAA,mBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}