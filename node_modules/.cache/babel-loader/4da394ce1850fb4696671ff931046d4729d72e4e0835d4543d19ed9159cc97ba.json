{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"账户信息:\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"转账操作\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_van_divider = _resolveComponent(\"van-divider\");\n  const _component_van_button = _resolveComponent(\"van-button\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createVNode(_component_van_divider, {\n    margin: 12\n  }), _createElementVNode(\"p\", null, \"地址:\" + _toDisplayString($setup.address), 1 /* TEXT */), _createVNode(_component_van_divider, {\n    margin: 12\n  }), _createElementVNode(\"p\", null, \"私钥:\" + _toDisplayString($setup.privateKey), 1 /* TEXT */), _createVNode(_component_van_divider, {\n    margin: 12\n  }), _createElementVNode(\"p\", null, \"余额:\" + _toDisplayString($setup.balance), 1 /* TEXT */), _createVNode(_component_van_divider, {\n    margin: 12\n  }), _hoisted_2, _createVNode(_component_van_button, {\n    type: \"primary\",\n    onClick: $setup.send\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"开始转账\")]),\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_Fragment","_hoisted_1","_createVNode","_component_van_divider","margin","_toDisplayString","$setup","address","privateKey","balance","_hoisted_2","_component_van_button","type","onClick","send","default","_withCtx","_createTextVNode","_"],"sources":["D:\\a\\wallet-demo\\web3-wallet\\src\\components\\web3Api.vue"],"sourcesContent":["<template>\r\n   <h1>账户信息:</h1>\r\n   <van-divider :margin=\"12\" />\r\n   <p>地址:{{address}}</p>\r\n   <van-divider :margin=\"12\" />\r\n   <p>私钥:{{privateKey}}</p>\r\n   <van-divider :margin=\"12\" />\r\n   <p>余额:{{balance}}</p>\r\n   \r\n   <van-divider :margin=\"12\" />\r\n   <h1>转账操作</h1>\r\n   <van-button type=\"primary\" @click=\"send\">开始转账</van-button>\r\n</template>\r\n\r\n<script setup>\r\nimport {ref} from \"vue\";\r\nimport Web3, { ContractTransactionDataAndInputError } from \"web3\";\r\nimport Tx from 'ethereumjs-tx';\r\n \r\nvar web3 = new Web3(Web3.givenProvider || 'wss://goerli.infura.io/ws/v3/dc92288a859d445890ede39d9dba5861');\r\n//var web311 = new web3(web3.givenProvider || \"ws://localhost:8545\");\r\n//console.log(\"Web3:\", web3) \r\n\r\n//创建账号\r\n// const account = web3.eth.accounts.create(\"123\");\r\n// console.log(\"account-->\",account)\r\n\r\nconst address = ref(\"0xB36abFFDb423bD33d4C110DCe7414422df06FCe4\")\r\nconst privateKey= ref(\"0x60e5fac5413a63ded9b739401df6b7c51a43b8b34392dff7e54a8e0e271d4430\")\r\n\r\nconst balance = ref(0)\r\n\r\n//balance.value = \r\nweb3.eth.getBalance(address.value).then((res)=>{\r\n    balance.value = res\r\n})\r\n//console.log(\"balance----->\",balance)\r\n\r\n\r\n//单位转换\r\nlet num1 = web3.utils.toWei('0.30','ether');\r\nlet num2 = web3.utils.fromWei(\"300000000000\",'ether');\r\nconsole.log(\"num2---->\",num2);\r\n\r\n//转账\r\nconst send = async ()=>{\r\n    //1.构建转账参数\r\n    //获取账户交易次数\r\n    const nonce = await web3.eth.getTransactionCount(address.value);\r\n    console.log(\"nonce--->\",nonce)\r\n    //获取预计转账gas\r\n    const gasPrice = await web3.eth.getGasPrice();\r\n    console.log(\"gasPrice--->\",gasPrice);\r\n    //转账金额 以wei 作为单位\r\n    const value = web3.utils.toWei('0.000', 'ether');\r\n\r\n    const rawTx = {\r\n        from:address.value,\r\n        to:'0x75844F334e4fDa3FD590fd5A28C939c8E17c2D4E',\r\n        nonce,\r\n        gasPrice,\r\n        value,\r\n        data:'0x0000',\r\n    };\r\n\r\n    //2. 生成 serializedTx\r\n\r\n    //转换成私钥\r\n    const pKys = Buffer(privateKey.value.slice(2),'hex')\r\n    console.log('pKys--->',pKys);\r\n    //gas 估算\r\n    const gas = await web3.eth.estimateGas(rawTx);\r\n    console.log(\"gas---->\",gas)\r\n    rawTx.gas = gas;\r\n    \r\n    // ethereumjs-tx 实现私钥加密\r\n    const tx = new Tx(rawTx);\r\n    tx.sign(pKys)\r\n\r\n    //生成 serializedTx \r\n    const serializedTx = tx.serialize().toString('hex');\r\n    console.log(\"serializedTx---->\",serializedTx)\r\n\r\n\r\n}\r\n\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":";gCACGA,mBAAA,CAAc,YAAV,OAAK;gCASTA,mBAAA,CAAa,YAAT,MAAI;;;;uBAVXC,mBAAA,CAAAC,SAAA,SACGC,UAAc,EACdC,YAAA,CAA4BC,sBAAA;IAAdC,MAAM,EAAE;EAAE,IACxBN,mBAAA,CAAqB,WAAlB,KAAG,GAAAO,gBAAA,CAAEC,MAAA,CAAAC,OAAO,kBACfL,YAAA,CAA4BC,sBAAA;IAAdC,MAAM,EAAE;EAAE,IACxBN,mBAAA,CAAwB,WAArB,KAAG,GAAAO,gBAAA,CAAEC,MAAA,CAAAE,UAAU,kBAClBN,YAAA,CAA4BC,sBAAA;IAAdC,MAAM,EAAE;EAAE,IACxBN,mBAAA,CAAqB,WAAlB,KAAG,GAAAO,gBAAA,CAAEC,MAAA,CAAAG,OAAO,kBAEfP,YAAA,CAA4BC,sBAAA;IAAdC,MAAM,EAAE;EAAE,IACxBM,UAAa,EACbR,YAAA,CAA0DS,qBAAA;IAA9CC,IAAI,EAAC,SAAS;IAAEC,OAAK,EAAEP,MAAA,CAAAQ;;IAXtCC,OAAA,EAAAC,QAAA,CAW4C,MAAI,CAXhDC,gBAAA,CAW4C,MAAI,E;IAXhDC,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}