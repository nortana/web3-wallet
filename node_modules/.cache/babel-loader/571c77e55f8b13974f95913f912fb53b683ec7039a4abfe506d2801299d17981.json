{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ecRecover = exports.sign = exports.signTransaction = exports.sendTransaction = exports.importRawKey = exports.lockAccount = exports.unlockAccount = exports.newAccount = exports.getAccounts = void 0;\nconst getAccounts = requestManager => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_listAccounts',\n    params: []\n  });\n});\nexports.getAccounts = getAccounts;\nconst newAccount = (requestManager, password) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_newAccount',\n    params: [password]\n  });\n});\nexports.newAccount = newAccount;\nconst unlockAccount = (requestManager, address, password, unlockDuration) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_unlockAccount',\n    params: [address, password, unlockDuration]\n  });\n});\nexports.unlockAccount = unlockAccount;\nconst lockAccount = (requestManager, address) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_lockAccount',\n    params: [address]\n  });\n});\nexports.lockAccount = lockAccount;\nconst importRawKey = (requestManager, keyData, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_importRawKey',\n    params: [keyData, passphrase]\n  });\n});\nexports.importRawKey = importRawKey;\nconst sendTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_sendTransaction',\n    params: [tx, passphrase]\n  });\n});\nexports.sendTransaction = sendTransaction;\nconst signTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_signTransaction',\n    params: [tx, passphrase]\n  });\n});\nexports.signTransaction = signTransaction;\nconst sign = (requestManager, data, address, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_sign',\n    params: [data, address, passphrase]\n  });\n});\nexports.sign = sign;\nconst ecRecover = (requestManager, signedData, signature) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_ecRecover',\n    params: [signedData, signature]\n  });\n});\nexports.ecRecover = ecRecover;","map":{"version":3,"names":["getAccounts","requestManager","__awaiter","send","method","params","exports","newAccount","password","unlockAccount","address","unlockDuration","lockAccount","importRawKey","keyData","passphrase","sendTransaction","tx","signTransaction","sign","data","ecRecover","signedData","signature"],"sources":["../../src/personal_rpc_methods.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBO,MAAMA,WAAW,GAAUC,cAAkD,IAAIC,SAAA;EACvF,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,uBAAuB;IAC/BC,MAAM,EAAE;GACR,CAAC;EAAA;AAJUC,OAAA,CAAAN,WAAW,GAAAA,WAAA;AAMjB,MAAMO,UAAU,GAAGA,CACzBN,cAAkD,EAClDO,QAAgB,KACbN,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,qBAAqB;IAC7BC,MAAM,EAAE,CAACG,QAAQ;GACjB,CAAC;EAAA;AAPUF,OAAA,CAAAC,UAAU,GAAAA,UAAA;AAShB,MAAME,aAAa,GAAGA,CAC5BR,cAAkD,EAClDS,OAAgB,EAChBF,QAAgB,EAChBG,cAAsB,KACnBT,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,wBAAwB;IAChCC,MAAM,EAAE,CAACK,OAAO,EAAEF,QAAQ,EAAEG,cAAc;GAC1C,CAAC;EAAA;AATUL,OAAA,CAAAG,aAAa,GAAAA,aAAA;AAWnB,MAAMG,WAAW,GAAGA,CAC1BX,cAAkD,EAClDS,OAAgB,KACbR,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,sBAAsB;IAC9BC,MAAM,EAAE,CAACK,OAAO;GAChB,CAAC;EAAA;AAPUJ,OAAA,CAAAM,WAAW,GAAAA,WAAA;AASjB,MAAMC,YAAY,GAAGA,CAC3BZ,cAAkD,EAClDa,OAAkB,EAClBC,UAAkB,KACfb,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,uBAAuB;IAC/BC,MAAM,EAAE,CAACS,OAAO,EAAEC,UAAU;GAC5B,CAAC;EAAA;AARUT,OAAA,CAAAO,YAAY,GAAAA,YAAA;AAUlB,MAAMG,eAAe,GAAGA,CAC9Bf,cAAkD,EAClDgB,EAAe,EACfF,UAAkB,KACfb,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,0BAA0B;IAClCC,MAAM,EAAE,CAACY,EAAE,EAAEF,UAAU;GACvB,CAAC;EAAA;AARUT,OAAA,CAAAU,eAAe,GAAAA,eAAA;AAUrB,MAAME,eAAe,GAAGA,CAC9BjB,cAAkD,EAClDgB,EAAe,EACfF,UAAkB,KACfb,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,0BAA0B;IAClCC,MAAM,EAAE,CAACY,EAAE,EAAEF,UAAU;GACvB,CAAC;EAAA;AARUT,OAAA,CAAAY,eAAe,GAAAA,eAAA;AAUrB,MAAMC,IAAI,GAAGA,CACnBlB,cAAkD,EAClDmB,IAAe,EACfV,OAAgB,EAChBK,UAAkB,KACfb,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,eAAe;IACvBC,MAAM,EAAE,CAACe,IAAI,EAAEV,OAAO,EAAEK,UAAU;GAClC,CAAC;EAAA;AATUT,OAAA,CAAAa,IAAI,GAAAA,IAAA;AAWV,MAAME,SAAS,GAAGA,CACxBpB,cAAkD,EAClDqB,UAAqB,EACrBC,SAAiB,KACdrB,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,oBAAoB;IAC5BC,MAAM,EAAE,CAACiB,UAAU,EAAEC,SAAS;GAC9B,CAAC;EAAA;AARUjB,OAAA,CAAAe,SAAS,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}