{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hexToUint8Array = exports.uint8ArrayToHexString = exports.padLeft = exports.numberToHex = exports.hexToNumber = exports.codePointToInt = exports.transformJsonDataToAbiFormat = exports.fetchArrayElement = exports.ethAbiToJsonSchema = exports.abiSchemaToJsonSchema = exports.parseBaseType = void 0;\nconst web3_errors_1 = require(\"web3-errors\");\nconst constants_js_1 = require(\"./constants.js\");\nconst abi_js_1 = require(\"./validation/abi.js\");\nconst string_js_1 = require(\"./validation/string.js\");\nconst errors_js_1 = require(\"./errors.js\");\nconst extraTypes = ['hex', 'number', 'blockNumber', 'blockNumberOrTag', 'filter', 'bloom'];\nconst parseBaseType = type => {\n  // Remove all empty spaces to avoid any parsing issue.\n  let strippedType = type.replace(/ /, '');\n  let baseTypeSize;\n  let isArray = false;\n  let arraySizes = [];\n  if (type.includes('[')) {\n    // Extract the array type\n    strippedType = strippedType.slice(0, strippedType.indexOf('['));\n    // Extract array indexes\n    arraySizes = [...type.matchAll(/(?:\\[(\\d*)\\])/g)].map(match => parseInt(match[1], 10)).map(size => Number.isNaN(size) ? -1 : size);\n    isArray = arraySizes.length > 0;\n  }\n  if (constants_js_1.VALID_ETH_BASE_TYPES.includes(strippedType)) {\n    return {\n      baseType: strippedType,\n      isArray,\n      baseTypeSize,\n      arraySizes\n    };\n  }\n  if (strippedType.startsWith('int')) {\n    baseTypeSize = parseInt(strippedType.substring(3), 10);\n    strippedType = 'int';\n  } else if (strippedType.startsWith('uint')) {\n    baseTypeSize = parseInt(type.substring(4), 10);\n    strippedType = 'uint';\n  } else if (strippedType.startsWith('bytes')) {\n    baseTypeSize = parseInt(strippedType.substring(5), 10);\n    strippedType = 'bytes';\n  } else {\n    return {\n      baseType: undefined,\n      isArray: false,\n      baseTypeSize: undefined,\n      arraySizes\n    };\n  }\n  return {\n    baseType: strippedType,\n    isArray,\n    baseTypeSize,\n    arraySizes\n  };\n};\nexports.parseBaseType = parseBaseType;\nconst convertEthType = (type, parentSchema = {}) => {\n  const typePropertyPresent = Object.keys(parentSchema).includes('type');\n  if (typePropertyPresent) {\n    throw new errors_js_1.Web3ValidatorError([{\n      keyword: 'eth',\n      message: 'Either \"eth\" or \"type\" can be presented in schema',\n      params: {\n        eth: type\n      },\n      instancePath: '',\n      schemaPath: ''\n    }]);\n  }\n  const {\n    baseType,\n    baseTypeSize\n  } = (0, exports.parseBaseType)(type);\n  if (!baseType && !extraTypes.includes(type)) {\n    throw new errors_js_1.Web3ValidatorError([{\n      keyword: 'eth',\n      message: `Eth data type \"${type}\" is not valid`,\n      params: {\n        eth: type\n      },\n      instancePath: '',\n      schemaPath: ''\n    }]);\n  }\n  if (baseType) {\n    if (baseType === 'tuple') {\n      throw new Error('\"tuple\" type is not implemented directly.');\n    }\n    return {\n      format: `${baseType}${baseTypeSize !== null && baseTypeSize !== void 0 ? baseTypeSize : ''}`,\n      required: true\n    };\n  }\n  if (type) {\n    return {\n      format: type,\n      required: true\n    };\n  }\n  return {};\n};\nconst abiSchemaToJsonSchema = (abis, level = '/0') => {\n  const schema = {\n    type: 'array',\n    items: [],\n    maxItems: abis.length,\n    minItems: abis.length\n  };\n  for (const [index, abi] of abis.entries()) {\n    // eslint-disable-next-line no-nested-ternary\n    let abiType;\n    let abiName;\n    let abiComponents = [];\n    // If it's a complete Abi Parameter\n    // e.g. {name: 'a', type: 'uint'}\n    if ((0, abi_js_1.isAbiParameterSchema)(abi)) {\n      abiType = abi.type;\n      abiName = abi.name;\n      abiComponents = abi.components;\n      // If its short form string value e.g. ['uint']\n    } else if (typeof abi === 'string') {\n      abiType = abi;\n      abiName = `${level}/${index}`;\n      // If it's provided in short form of tuple e.g. [['uint', 'string']]\n    } else if (Array.isArray(abi)) {\n      // If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]\n      if (abi[0] && typeof abi[0] === 'string' && abi[0].startsWith('tuple') && !Array.isArray(abi[0]) && abi[1] && Array.isArray(abi[1])) {\n        // eslint-disable-next-line prefer-destructuring\n        abiType = abi[0];\n        abiName = `${level}/${index}`;\n        abiComponents = abi[1];\n      } else {\n        abiType = 'tuple';\n        abiName = `${level}/${index}`;\n        abiComponents = abi;\n      }\n    }\n    const {\n      baseType,\n      isArray,\n      arraySizes\n    } = (0, exports.parseBaseType)(abiType);\n    let childSchema;\n    let lastSchema = schema;\n    for (let i = arraySizes.length - 1; i > 0; i -= 1) {\n      childSchema = {\n        type: 'array',\n        items: [],\n        maxItems: arraySizes[i],\n        minItems: arraySizes[i]\n      };\n      if (arraySizes[i] < 0) {\n        delete childSchema.maxItems;\n        delete childSchema.minItems;\n      }\n      // lastSchema.items is a Schema, concat with 'childSchema'\n      if (!Array.isArray(lastSchema.items)) {\n        lastSchema.items = [lastSchema.items, childSchema];\n      } // lastSchema.items is an empty Scheme array, set it to 'childSchema'\n      else if (lastSchema.items.length === 0) {\n        lastSchema.items = childSchema;\n      } // lastSchema.items is a non-empty Scheme array, append 'childSchema'\n      else {\n        lastSchema.items.push(childSchema);\n      }\n      lastSchema = childSchema;\n    }\n    if (baseType === 'tuple' && !isArray) {\n      const nestedTuple = (0, exports.abiSchemaToJsonSchema)(abiComponents, abiName);\n      nestedTuple.$id = abiName;\n      lastSchema.items.push(nestedTuple);\n    } else if (baseType === 'tuple' && isArray) {\n      const arraySize = arraySizes[0];\n      const item = {\n        $id: abiName,\n        type: 'array',\n        items: (0, exports.abiSchemaToJsonSchema)(abiComponents, abiName),\n        maxItems: arraySize,\n        minItems: arraySize\n      };\n      if (arraySize < 0) {\n        delete item.maxItems;\n        delete item.minItems;\n      }\n      lastSchema.items.push(item);\n    } else if (isArray) {\n      const arraySize = arraySizes[0];\n      const item = {\n        type: 'array',\n        $id: abiName,\n        items: convertEthType(String(baseType)),\n        minItems: arraySize,\n        maxItems: arraySize\n      };\n      if (arraySize < 0) {\n        delete item.maxItems;\n        delete item.minItems;\n      }\n      lastSchema.items.push(item);\n    } else if (Array.isArray(lastSchema.items)) {\n      // Array of non-tuple items\n      lastSchema.items.push(Object.assign({\n        $id: abiName\n      }, convertEthType(abiType)));\n    } else {\n      // Nested object\n      lastSchema.items.items.push(Object.assign({\n        $id: abiName\n      }, convertEthType(abiType)));\n    }\n    lastSchema = schema;\n  }\n  return schema;\n};\nexports.abiSchemaToJsonSchema = abiSchemaToJsonSchema;\nconst ethAbiToJsonSchema = abis => (0, exports.abiSchemaToJsonSchema)(abis);\nexports.ethAbiToJsonSchema = ethAbiToJsonSchema;\nconst fetchArrayElement = (data, level) => {\n  if (level === 1) {\n    return data;\n  }\n  return (0, exports.fetchArrayElement)(data[0], level - 1);\n};\nexports.fetchArrayElement = fetchArrayElement;\nconst transformJsonDataToAbiFormat = (abis, data, transformedData) => {\n  const newData = [];\n  for (const [index, abi] of abis.entries()) {\n    // eslint-disable-next-line no-nested-ternary\n    let abiType;\n    let abiName;\n    let abiComponents = [];\n    // If it's a complete Abi Parameter\n    // e.g. {name: 'a', type: 'uint'}\n    if ((0, abi_js_1.isAbiParameterSchema)(abi)) {\n      abiType = abi.type;\n      abiName = abi.name;\n      abiComponents = abi.components;\n      // If its short form string value e.g. ['uint']\n    } else if (typeof abi === 'string') {\n      abiType = abi;\n      // If it's provided in short form of tuple e.g. [['uint', 'string']]\n    } else if (Array.isArray(abi)) {\n      // If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]\n      if (abi[1] && Array.isArray(abi[1])) {\n        abiType = abi[0];\n        abiComponents = abi[1];\n      } else {\n        abiType = 'tuple';\n        abiComponents = abi;\n      }\n    }\n    const {\n      baseType,\n      isArray,\n      arraySizes\n    } = (0, exports.parseBaseType)(abiType);\n    const dataItem = Array.isArray(data) ? data[index] : data[abiName];\n    if (baseType === 'tuple' && !isArray) {\n      newData.push((0, exports.transformJsonDataToAbiFormat)(abiComponents, dataItem, transformedData));\n    } else if (baseType === 'tuple' && isArray) {\n      const tupleData = [];\n      for (const tupleItem of dataItem) {\n        // Nested array\n        if (arraySizes.length > 1) {\n          const nestedItems = (0, exports.fetchArrayElement)(tupleItem, arraySizes.length - 1);\n          const nestedData = [];\n          for (const nestedItem of nestedItems) {\n            nestedData.push((0, exports.transformJsonDataToAbiFormat)(abiComponents, nestedItem, transformedData));\n          }\n          tupleData.push(nestedData);\n        } else {\n          tupleData.push((0, exports.transformJsonDataToAbiFormat)(abiComponents, tupleItem, transformedData));\n        }\n      }\n      newData.push(tupleData);\n    } else {\n      newData.push(dataItem);\n    }\n  }\n  // Have to reassign before pushing to transformedData\n  // eslint-disable-next-line no-param-reassign\n  transformedData = transformedData !== null && transformedData !== void 0 ? transformedData : [];\n  transformedData.push(...newData);\n  return transformedData;\n};\nexports.transformJsonDataToAbiFormat = transformJsonDataToAbiFormat;\n/**\n * Code points to int\n */\nconst codePointToInt = codePoint => {\n  if (codePoint >= 48 && codePoint <= 57) {\n    /* ['0'..'9'] -> [0..9] */\n    return codePoint - 48;\n  }\n  if (codePoint >= 65 && codePoint <= 70) {\n    /* ['A'..'F'] -> [10..15] */\n    return codePoint - 55;\n  }\n  if (codePoint >= 97 && codePoint <= 102) {\n    /* ['a'..'f'] -> [10..15] */\n    return codePoint - 87;\n  }\n  throw new Error(`Invalid code point: ${codePoint}`);\n};\nexports.codePointToInt = codePointToInt;\n/**\n * Converts value to it's number representation\n */\nconst hexToNumber = value => {\n  if (!(0, string_js_1.isHexStrict)(value)) {\n    throw new Error('Invalid hex string');\n  }\n  const [negative, hexValue] = value.startsWith('-') ? [true, value.slice(1)] : [false, value];\n  const num = BigInt(hexValue);\n  if (num > Number.MAX_SAFE_INTEGER) {\n    return negative ? -num : num;\n  }\n  if (num < Number.MIN_SAFE_INTEGER) {\n    return num;\n  }\n  return negative ? -1 * Number(num) : Number(num);\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Converts value to it's hex representation\n */\nconst numberToHex = value => {\n  if ((typeof value === 'number' || typeof value === 'bigint') && value < 0) {\n    return `-0x${value.toString(16).slice(1)}`;\n  }\n  if ((typeof value === 'number' || typeof value === 'bigint') && value >= 0) {\n    return `0x${value.toString(16)}`;\n  }\n  if (typeof value === 'string' && (0, string_js_1.isHexStrict)(value)) {\n    const [negative, hex] = value.startsWith('-') ? [true, value.slice(1)] : [false, value];\n    const hexValue = hex.split(/^(-)?0(x|X)/).slice(-1)[0];\n    return `${negative ? '-' : ''}0x${hexValue.replace(/^0+/, '').toLowerCase()}`;\n  }\n  if (typeof value === 'string' && !(0, string_js_1.isHexStrict)(value)) {\n    return (0, exports.numberToHex)(BigInt(value));\n  }\n  throw new web3_errors_1.InvalidNumberError(value);\n};\nexports.numberToHex = numberToHex;\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.\n */\nconst padLeft = (value, characterAmount, sign = '0') => {\n  if (typeof value === 'string' && !(0, string_js_1.isHexStrict)(value)) {\n    return value.padStart(characterAmount, sign);\n  }\n  const hex = typeof value === 'string' && (0, string_js_1.isHexStrict)(value) ? value : (0, exports.numberToHex)(value);\n  const [prefix, hexValue] = hex.startsWith('-') ? ['-0x', hex.slice(3)] : ['0x', hex.slice(2)];\n  return `${prefix}${hexValue.padStart(characterAmount, sign)}`;\n};\nexports.padLeft = padLeft;\nfunction uint8ArrayToHexString(uint8Array) {\n  let hexString = '0x';\n  for (const e of uint8Array) {\n    const hex = e.toString(16);\n    hexString += hex.length === 1 ? `0${hex}` : hex;\n  }\n  return hexString;\n}\nexports.uint8ArrayToHexString = uint8ArrayToHexString;\nfunction hexToUint8Array(hex) {\n  let value;\n  if (hex.toLowerCase().startsWith('0x')) {\n    value = hex.slice(2);\n  } else {\n    value = hex;\n  }\n  if (value.length % 2 !== 0) {\n    throw new web3_errors_1.InvalidBytesError(`hex string has odd length: ${hex}`);\n  }\n  const bytes = new Uint8Array(Math.ceil(value.length / 2));\n  for (let i = 0; i < bytes.length; i += 1) {\n    const byte = parseInt(value.substring(i * 2, i * 2 + 2), 16);\n    bytes[i] = byte;\n  }\n  return bytes;\n}\nexports.hexToUint8Array = hexToUint8Array;","map":{"version":3,"names":["require","web3_errors_1","constants_js_1","abi_js_1","string_js_1","errors_js_1","extraTypes","parseBaseType","type","strippedType","replace","baseTypeSize","isArray","arraySizes","includes","slice","indexOf","matchAll","map","match","parseInt","size","Number","isNaN","length","VALID_ETH_BASE_TYPES","baseType","startsWith","substring","undefined","exports","convertEthType","parentSchema","typePropertyPresent","Object","keys","Web3ValidatorError","keyword","message","params","eth","instancePath","schemaPath","Error","format","required","abiSchemaToJsonSchema","abis","level","schema","items","maxItems","minItems","index","abi","entries","abiType","abiName","abiComponents","isAbiParameterSchema","name","components","Array","childSchema","lastSchema","i","push","nestedTuple","$id","arraySize","item","String","assign","ethAbiToJsonSchema","fetchArrayElement","data","transformJsonDataToAbiFormat","transformedData","newData","dataItem","tupleData","tupleItem","nestedItems","nestedData","nestedItem","codePointToInt","codePoint","hexToNumber","value","isHexStrict","negative","hexValue","num","BigInt","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","numberToHex","toString","hex","split","toLowerCase","InvalidNumberError","padLeft","characterAmount","sign","padStart","prefix","uint8ArrayToHexString","uint8Array","hexString","e","hexToUint8Array","InvalidBytesError","bytes","Uint8Array","Math","ceil","byte"],"sources":["../../src/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}